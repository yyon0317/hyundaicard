@use "sass:math"; // 다른 규칙보다 먼저 작성


//$font-default: "Montserrat";
$font-size: 15px;
$font-color: #222;
$hover-color : #fc9a00;

$grid-width: 1120px;

// $gutter : (
//   gutter-xxs : 4px,
//   gutter-xs : 8px,
//   gutter-s : 16px,
//   gutter-m : 24px,
//   gutter-l : 36px,
//   gutter-xl : 48px,
//   gutter-xxl : 80px  
// )

$gutter-1 : 4px;
$gutter-2 : 8px;
$gutter-3 : 12px;
$gutter-4 : 16px;
$gutter-5 : 20px;
$gutter-6 : 24px;
$gutter-7 : 28px;
$gutter-8 : 32px;
$gutter-9 : 36px;
$gutter-10 : 40px;
$gutter-11 : 44px;
$gutter-12 : 48px;
$gutter-13 : 52px;
$gutter-14 : 56px;
$gutter-15 : 60px;
$gutter-16 : 64px;
$gutter-17 : 68px;
$gutter-18 : 72px;
$gutter-19 : 76px;
$gutter-20 : 80px;


// // @each 반복문을 사용하여 변수 출력
// @each $value in $gutters {
//   $index: index($gutters, $value); // 배열에서 값의 인덱스를 가져옵니다.
  
//   .gutter-#{$index} {
//     margin: $value; // 각 클래스에 해당하는 margin 값을 적용합니다.
//   }
// }


/* 기준 화면 너비 */
$vw-viewport: 1200;
@mixin SCREEN{ @media (max-width: #{$vw-viewport}px){ @content; } }

/* pixel을 vw로 변환해주는 함수 */
@function get-vw($px){
  $vw-context: $vw-viewport * 0.005 * 1px;
  @return math.div($px, $vw-context) * 1vw;
}

/* 특정 CSS 속성을 픽셀 단위와 반응형 vw 단위로 설정하는 믹스인 */
@mixin set-vw($property, $value){
  @if type-of($value) == 'number' {
    @include SCREEN {
      #{$property}: get-vw($value);
    }
    #{$property}: $value;
  } @else if type-of($value) == 'string' and str-slice($value, 1, 2) == '--' {
    @include SCREEN {
      #{$property}: calc(#{$value} * 100vw / #{$vw-viewport});
    }
    #{$property}: $value;
  }
}

/* 특정 CSS 속성에 대해 수직(vertical) 및 수평(horizontal) 값을 설정하는 믹스인 */
@mixin set-pair-vw($property, $vertical, $horizontal){
  @if type-of($vertical) == 'number' and type-of($horizontal) == 'number' {
    @include SCREEN {
      #{$property}: get-vw($vertical) get-vw($horizontal);
    }
    #{$property}: $vertical $horizontal;
  } @else {
    @include SCREEN {
      #{$property}: calc(#{$vertical} * 100vw / #{$vw-viewport}) calc(#{$horizontal} * 100vw / #{$vw-viewport});
    }
    #{$property}: $vertical $horizontal;
  }
}


$gutters: (
  1: 4px,
  2: 8px,
  3: 12px,
  4: 16px,
  5: 20px,
  6: 24px,
  7: 28px,
  8: 32px,
  9: 36px,
  10: 40px,
  11: 44px,
  12: 48px,
  13: 52px,
  14: 56px,
  15: 60px,
  16: 64px,
  17: 68px,
  18: 72px,
  19: 76px,
  20: 80px
);

// $gutter-6: map-get($gutters, 6);

@for $i from 3 through 13 {
  $gutter-value: map-get($gutters, $i); // $gutters 맵에서 해당하는 값 가져오기
  .outline-#{$i}x {
    @include set-vw(line-height,$gutter-value);
    @include set-vw(font-size, calc($gutter-value/ 1.5));
  }
}


$brandColor : (
  #264998,
  #3c9082,
  #212e4e
);

$path : "/include/img";

$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 1000px,
  xl: 1120px
);

// 4의배수
//--baseline-0x: 0px--baseline-1x: 4px--baseline-2x: 8px--baseline-3x: 12px--baseline-4x: 16px var(--baseline-2x)
// :root {
//   --baseline: 4px;

//   @for $i from 0 through 40 {
//     --baseline-#{$i}x: calc(var(--baseline) * #{$i});
//   }
// }
// :root {
//   --baseline: 4px;

//   @for $i from 0 through 40 {
//     --baseline-#{$i}x: calc(#{$i} * #{var(--baseline)});
//   }
// }
//반응형디자인 활용
// :root {--baseline: 4px;
// @media (max-width: 768px) {
//   :root {
//     --baseline: 2px; /* 모바일 장치에서는 기본 간격을 줄입니다. */
//   }
// }
// .element {
//   padding: var(--baseline-4x); /* 데스크톱에서는 16px, 모바일에서는 8px */
// }
